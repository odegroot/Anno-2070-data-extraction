# coding=utf_8
'''
Generates a JSON file with the properties of all academy research projects.

Created on Dec 18, 2011

@author: Oscar de Groot (Grilse)
'''

import collections
import configparser
import guid_to_icon
import json
import os
import re
import textwrap
import xml.etree.ElementTree as ET

__game_version  = "Anno 2070 v1.02"
__model_version = "0.1"
__out_encoding  = 'utf_8'

__project_root  = os.path.join('..', '..')
__rda_folder    = os.path.join(__project_root, "src", "rda")
__out_folder    = os.path.join(__project_root, "target")
__features_xml  = os.path.join(__rda_folder, "patch3", "data", "config", "features", "features.xml")
__guids_txt     = os.path.join(__rda_folder, "eng3", "data", "loca", "eng", "txt", "guids.txt")
__interface_txt = os.path.join(__rda_folder, "eng3", "data", "loca", "eng", "txt", "interface.txt")

__regex_guidname= re.compile(r'\[GUIDNAME (?P<GUID>\d+)\]')

__guid_to_icon = guid_to_icon.get_guid_to_icon_dict()

# Maps the ItemQuality in features.xml to the number of stars displayed in-game.
__ItemQuality_stars = {
    'D' : 0,
    'C' : 1,
    'B' : 2,
    'A' : 3,
    None: 3
}

def main():
    eng = _get_localization('eng')
    research_projects = _get_research_project_dicts(eng)
    
    with open(_get_json_path(), mode="w", encoding=__out_encoding, newline='\n') as json_file:
        json_file.write('// Encoding: ' + __out_encoding + '\n')
        json_file.write('// This file was automatically generated by ' + _get_current_py_filename() + '\n')
        json_file.write('// See https://github.com/odegroot/Anno-2070-data-extraction\n')
        json_file.write('// \n')
        json_file.write('// Game version: ' + __game_version + '\n')
        json_file.write('// Model version: ' + __model_version + '\n')
        
        json_file.write(textwrap.dedent('''
            /*
            =====================
            Model reference
            =====================
            
            GUID:
                A globally unique identifier for this research project. No other entity within Anno 2070 will have the same GUID.
            Name:
                Internal name of the research project. This name is NOT displayed in-game; a localization text is used instead.
            Name.eng:
                English localized name of the research project. 
            
            category:
                Each project belongs to one of the following categories: Energy, Ecologic, Vehicles, Seed, Public, Special, Production, Research
            subcategory (optional):
                Technologies are grouped by the building or unit that they affect. Example: Energy -> CoalPowerPlant -> Productivity CoalPowerPlant
            
            ItemQuality:
                The quality of the research project, expressed as a letter. Possible values: A, B, C, D, null. A is the highest, D is the lowest. Null is equivalent to A.
            ItemQuality.stars:
                The quality of the research project, expressed as the number of gold stars . Possible values: 0, 1, 2, 3.
            
            icon.base:
                Filename of the base icon of the research project.
            icon.overlay (optional):
                Filename of the overlay icon of the research project.
            
            =====================
            */\n\n'''
        ))
        
        json.dump(research_projects, fp=json_file, indent=2, separators=(',', ': ')) # separators: replace ', ' with ',' to prevent trailing whitespace.
        
    print("done.")

def _get_current_py_filename():
    '''Returns the filename of the python file that is currently executing.'''
    # __file__.rpartition(os.sep) --> (path, os.sep, file)
    py_filename = __file__.rpartition(os.sep)[2]
    
    return py_filename

def _get_json_path():
    '''
    Returns the path to the JSON file that will contain the result of this script.
    
    The JSON filename is the same as the script that generates it, but with the extension ".js", and with a version number included.
    Example: "academy_research_v0.1.js"
    The file is placed in "{project_root}/target/"
    '''
    # this_py_filename.rpartition('.') --> (filename_without_extension, '.', 'py')
    filename_without_extension = _get_current_py_filename().rpartition('.')[0]
    json_filename = "{}_v{}.js".format(filename_without_extension, __model_version)
    json_path = os.path.join(__out_folder, json_filename)
    
    return json_path

def _get_research_project_dicts(eng):
    '''
    Returns a list of dictionaries. Each dictionary represents one academy research project.
    
    An overview of features.xml is available at {project_root}/src/doc/features_overview.xml
    A description of the research project dictionary is included in the generated JSON file.
    '''
    projects = []
    
    # Structure of features.xml
    # All research-related stuff is in the toplevel group named "Science".
    # The "Science" group has four subgroups: Modules, Prototypes, Devs and DiscoveryPools.
    #  
    category_groups = []
    for group in ET.parse(__features_xml).findall('.//Group'):
        if (group.findtext('Name') == 'Devs'):
            category_groups = group.findall('Groups/Group') # find all subgroups of the Devs-group.
            break
        
    if (category_groups == []):
        raise Exception("Could not find the Devs-group in features.xml.")
    
    for category_group in category_groups:
        category = category_group.findtext('Name')
        category_project_count = 0
        
        for project_asset in category_group.findall('Assets/Asset'):
            projects.append(_get_research_project_dict(project_asset, eng, category))
            category_project_count += 1
        
        for subcategory_group in category_group.findall('Groups/Group'):
            subcategory = subcategory_group.findtext('Name')
            for project_asset in subcategory_group.findall('Assets/Asset'):
                projects.append(_get_research_project_dict(project_asset, eng, category, subcategory))
                category_project_count += 1
        
        print('Category {:10} has {:>2} projects.'.format(category, category_project_count))
    
    return projects
    
def _get_research_project_dict(project_asset, eng, category, subcategory=None):
    '''
    Returns a single research project dictionary, based on its <Asset>...</Asset>. 
    
    Documentation of the keys in this dictionary and their meaning is included in the generated JSON file.
    '''
    project = collections.OrderedDict() # OrderedDict preserves the order of the keys by the order in which they are inserted. A regular dict does not do this. 
    
    GUID = project_asset.findtext('Values/Standard/GUID')
    project['GUID'] = GUID
    project['Name'] = project_asset.findtext('Values/Standard/Name')
    
    name_eng = eng[GUID]
    # Localization strings can refer to each other. Follow these references and display the final result.
    # Replace "Blueprint: [GUIDNAME 10087]"
    # With    "Blueprint: Hydroelectric power plant"
    if (__regex_guidname.search(name_eng)):
        inner_GUID = __regex_guidname.search(name_eng).group('GUID')
        name_eng = __regex_guidname.sub(eng[inner_GUID], name_eng, count=1)
    project['Name.eng'] = name_eng
    
    project['category'] = category
    if subcategory != None: project['subcategory'] = subcategory
    
    project['ItemQuality'] = project_asset.findtext('Values/Item/ItemQuality')
    project['ItemQuality.stars'] = __ItemQuality_stars[project['ItemQuality']]
    
    project['icon.base'] = __guid_to_icon[GUID]['icon.base']
    if 'icon.overlay' in __guid_to_icon[GUID]:
        project['icon.overlay'] = __guid_to_icon[GUID]['icon.overlay']
    
    return project

def _get_localization(lang):
    '''
    Parses an Anno 2070 properties guids_file, such as guids.txt.
    
    Returns a dictionary of the key/value pairs defined in the guids_file.
    '''
    if (lang != 'eng'):
        raise Exception('Only English localization is currently supported.')
    
    # The text files are encoded in UTF-16. Its endianness is automatically detected by open(), using the BOM.
    guids_file     = open(__guids_txt    , encoding="utf_16")
    interface_file = open(__interface_txt, encoding="utf_16")
    
    config = configparser.ConfigParser()
    config.read_file(_add_section_header(guids_file    , 'DEFAULT'), source=__guids_txt)
    config.read_file(_add_section_header(interface_file, 'DEFAULT'), source=__interface_txt)
    return config['DEFAULT']

def _add_section_header(properties_file, header_name):
    '''
    configparser.ConfigParser requires at least one section header in a properties file.
    The Anno 2070 properties files don't have section headers, so a header is added on the fly.
    '''
    yield '[{}]\n'.format(header_name)
    for line in properties_file:
        yield line
    
if __name__ == "__main__":
    main()